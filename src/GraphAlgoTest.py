import unittest
from DiGraph import DiGraph
from GraphAlgo import GraphAlgo


class GraphAlgoTest(unittest.TestCase):
    def test_saveAndLoad_to_json(self):
        g1 = GraphAlgo()
        g1.get_graph().add_node(0, (1.1, 2.2, 3.3))
        g1.get_graph().add_node(1, (1.3, 2.7, 3.8))
        g1.get_graph().add_node(2, (2.4, 3.1, 1.9))
        g1.get_graph().add_node(3, (1.1, 3.2, 2.3))
        g1.get_graph().add_edge(0, 1, 3.2)
        g1.get_graph().add_edge(1, 2, 2.1)
        g1.get_graph().add_edge(2, 0, 1.9)
        g1.get_graph().add_edge(3, 2, 4.1)
        g1.get_graph().add_edge(1, 3, 3.6)
        b = g1.save_to_json("../src/save_test.json")
        self.assertTrue(b)
        G = GraphAlgo()
        b = G.load_from_json("../src/save_test.json")
        self.assertTrue(b)

    def test_shortest_path(self):
        g = DiGraph()
        g.add_node(0, (1.1, 2.2, 3.3))
        g.add_node(1, (1.3, 2.7, 3.8))
        g.add_node(2, (2.4, 3.1, 1.9))
        g.add_node(3, (1.1, 3.2, 2.3))
        g.add_edge(0, 1, 2.2)
        g.add_edge(1, 3, 1.6)
        g.add_edge(1, 2, 2.1)
        g.add_edge(2, 0, 1.9)
        g.add_edge(3, 2, 4.1)
        g.add_edge(0, 2, 1.1)
        g.add_edge(0, 3, 11.2)
        g1 = GraphAlgo(g)
        shortestPath = g1.shortest_path(0, 3)
        self.assertEqual(shortestPath, (3.8000000000000003, [0, 1, 3]))
        g.remove_edge(1, 3)
        g.add_edge(2, 3, 1.3)
        g1 = GraphAlgo(g)
        shortestPath = g1.shortest_path(0, 3)
        self.assertEqual(shortestPath, (2.4000000000000004, [0, 2, 3]))

    def test_connected_components(self):
        g = DiGraph()
        g.add_node(0, (1.1, 2.2, 3.3))
        g.add_node(1, (1.3, 2.7, 3.8))
        g.add_node(2, (2.4, 3.1, 1.9))
        g.add_node(3, (1.1, 3.2, 2.3))
        g.add_edge(0, 1, 2.2)
        g.add_edge(1, 3, 1.6)
        g.add_edge(1, 2, 2.1)
        g.add_edge(2, 0, 1.9)
        g.add_edge(3, 2, 4.1)
        g.add_edge(0, 2, 1.1)
        g.add_edge(0, 3, 11.2)
        g1 = GraphAlgo(g)
        c = g1.connected_components()
        self.assertEqual(c, [[0, 2, 1, 3]])
        g.remove_edge(0, 1)
        g1 = GraphAlgo(g)
        c = g1.connected_components()
        self.assertEqual(c, [[0, 2, 3], [1]])

    def test_connected_component(self):
        g = DiGraph()
        g.add_node(0, (1.1, 2.2, 3.3))
        g.add_node(1, (1.3, 2.7, 3.8))
        g.add_node(2, (2.4, 3.1, 1.9))
        g.add_node(3, (1.1, 3.2, 2.3))
        g.add_edge(0, 1, 2.2)
        g.add_edge(1, 3, 1.6)
        g.add_edge(1, 2, 2.1)
        g.add_edge(2, 0, 1.9)
        g.add_edge(3, 2, 4.1)
        g.add_edge(0, 2, 1.1)
        g.add_edge(0, 3, 11.2)
        g1 = GraphAlgo(g)
        c = g1.connected_component(1)
        self.assertEqual(c, [0, 2, 1, 3])
        g.remove_edge(0, 1)
        g1 = GraphAlgo(g)
        c = g1.connected_component(1)
        self.assertEqual(c, [1])


if __name__ == '__main__':
    unittest.main()
